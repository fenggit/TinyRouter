package com.tinyrouter.api;

import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;

import androidx.annotation.NonNull;

import com.tinyrouter.cls.ClassUtils;
import com.tinyrouter.cls.PackageUtils;
import com.tinyrouter.inter.IRouterLoader;
import com.tinyrouter.inter.IRouterProcessor;
import com.tinyrouter.service.ServiceConfigItem;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class TinyRouterManager {
    private Map<String, Class<? extends Activity>> activityMap;

    private Map<String, Class<? extends IRouterProcessor>> processorMap;

    private Map<Class, ServiceConfigItem> serviceMap;

    public TinyRouterManager(Context context) {
        activityMap = new HashMap<>();
        processorMap = new HashMap<>();
        serviceMap = new HashMap<>();

        try {
            // 多个模块
            Set<String> routerMap;

            if (PackageUtils.isNewVersion(context)) {
                RouterLog.i("Run with debug mode or new install, rebuild router map.");
                // These class was generated by arouter-compiler.
                routerMap = ClassUtils.getFileNameByPackageName(context, PackageUtils.ROUTE_ROOT_PACKAGE);
                //0 = "com.simple.modular.compiler.RouterLoader$moduleapp"
                //1 = "com.simple.modular.compiler.RouterLoader$modulelogin"
                //2 = "com.simple.modular.compiler.RouterLoader$moduleroom"
                if (!routerMap.isEmpty()) {
                    context.getSharedPreferences(PackageUtils.AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(PackageUtils.AROUTER_SP_KEY_MAP, routerMap).apply();
                }

                PackageUtils.updateVersion(context);    // Save new version name when router map update finishes.
            } else {
                RouterLog.i("Load router map from cache.");
                routerMap = new HashSet<>(context.getSharedPreferences(PackageUtils.AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(PackageUtils.AROUTER_SP_KEY_MAP, new HashSet<String>()));
            }

            RouterLog.e("路由初始化 routerMap ：" + routerMap.toString());

            for (String cls : routerMap) {
                IRouterLoader loader = null;
                try {
                    loader = (IRouterLoader) Class.forName(cls).newInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (loader != null) {
                    if (loader.getActivityMap() != null) {
                        activityMap.putAll(loader.getActivityMap());
                    }
                    if (loader.getProcessorMap() != null) {
                        processorMap.putAll(loader.getProcessorMap());
                    }
                    if (loader.getServiceMap() != null) {
                        serviceMap.putAll(loader.getServiceMap());
                    }
                }
            }

            RouterLog.e("路由初始化 activityMap size >>>>>>>>>> " + activityMap.size());
            RouterLog.e("路由初始化 processorMap size >>>>>>>>>> " + processorMap.size());
            RouterLog.e("路由初始化 serviceMap size >>>>>>>>>> " + serviceMap.size());

        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Class<? extends Activity> getRouterActivity(@NonNull String router) {
        return activityMap.get(router);
    }

    public Class<? extends IRouterProcessor> getRouterProcessor(@NonNull String router) {
        return processorMap.get(router);
    }

    public <T> Class<? extends T> getServiceImplClass(@NonNull Class<T> parent) {
        return serviceMap.get(parent).impl;
    }

    public <T> ServiceConfigItem<T> getServiceConfig(@NonNull Class<T> parent) {
        return serviceMap.get(parent);
    }
}
